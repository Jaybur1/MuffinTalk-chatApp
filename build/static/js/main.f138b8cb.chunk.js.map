{"version":3,"sources":["components/LoginForm.js","components/sideBar/SideBarOption.js","components/sideBar/SideBar.js","components/chat/ChatHeading.js","components/Message/Messages.js","components/Message/MessageInput.js","components/chat/ChatContainer.js","components/Layout.js","App.js","serviceWorker.js","index.js","Events.js","Factories.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setUser","_ref","user","isUser","console","log","setError","error","setState","state","nickname","handleSubmit","bind","assertThisInitialized","handleChange","event","preventDefault","socket","emit","VERIFY_USER","target","value","_this2","_this$state","react_default","a","createElement","className","src","alt","onSubmit","htmlFor","id","ref","input","textInput","type","onChange","placeholder","Component","SideBarOption","_Component","apply","arguments","inherits","createClass","key","_this$props","name","lastMessage","active","onClick","concat","toUpperCase","defaultProps","SideBar","search","onSendPrivateMessage","addChatForUser","username","activeSideBar","CHATS","setActiveSideBar","chats","activeChat","setActiveChat","logout","users","setMenu","style","width","keyboard_arrow_down_default","USERS","length","react_mdl_lib","text","String","noBackground","refs","map","chat","SideBarOption_SideBarOption","isGeneral","createChatNameFromUsers","get","last","messages","differenceBy","otherUser","title","power_settings_new_default","ChatHeading","handleMenu","menuStatus","cursor","label","position","Messages","scrollDown","container","scrollTop","scrollHeight","typingUsers","message","sender","time","MessageInput","handleKeyUp","keyCode","sendTyping","lastUpdateTime","Date","now","isTyping","startCheckingTyping","typingInterval","setInterval","stopCheckingTyping","clearInterval","sendMessage","autoComplete","onKeyUp","disabled","ChatContainer","initSocket","COMMUNITY_CHAT","resetChat","on","PRIVATE_MESSAGE","addChat","USER_DISCONNECTED","removedUsers","values","removeUserFromChat","USER_CONNECTED","NEW_CHAT_USER","addUserToChat","sendPrivateMessage","reciever","chatId","newUser","newChats","assign","toConsumableArray","newUsers","difference","u","objectSpread","reset","undefined","messageEvent","MESSAGE_RECIEVED","typingEvent","TYPING","updateTypingInChat","addMessageToChat","push","_ref2","includes","filter","MESSAGE_SENT","off","_this$props2","sideBar_SideBar","chat_ChatHeading","Message_Messages","Message_MessageInput","socketURL","Layout","io","reconnect","LOGOUT","chat_ChatContainer","components_LoginForm","App","components_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","uuidv4","require","excludedUser","join","getTime","date","getHours","getMinutes","slice","createUser","_ref$name","_ref$socketId","socketId","createMessage","_ref2$message","_ref2$sender","createChat","_ref3","_ref3$messages","_ref3$users","_ref3$isGeneral"],"mappings":"sOAoEeA,cAhEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASVQ,QAAU,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,OACfC,QAAQC,IAAIH,EAAMC,GACdA,EACAV,EAAKa,SAAS,oBAEdb,EAAKa,SAAS,IACdb,EAAKD,MAAMQ,QAAQE,KAhBRT,EAkCnBa,SAAW,SAACC,GACRd,EAAKe,SAAS,CAAED,WAjChBd,EAAKgB,MAAQ,CACTC,SAAU,GACVH,MAAO,IAEXd,EAAKkB,aAAelB,EAAKkB,aAAaC,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACpBA,EAAKqB,aAAerB,EAAKqB,aAAaF,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAPLA,4EAqBNsB,GACTA,EAAMC,iBACNZ,QAAQC,IAAIT,KAAKa,MAAMC,UAFP,IAGRO,EAAWrB,KAAKJ,MAAhByB,OACAP,EAAad,KAAKa,MAAlBC,SACRO,EAAOC,KAAKC,cAAaT,EAAUd,KAAKI,SACxCJ,KAAKY,SAAS,CAAEE,SAAU,0CAGjBK,GACTnB,KAAKY,SAAS,CAAEE,SAAUK,EAAMK,OAAOC,yCAOlC,IAAAC,EAAA1B,KAAA2B,EACuB3B,KAAKa,MAAzBC,EADHa,EACGb,SAAUH,EADbgB,EACahB,MAClB,OACIiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oFAAoFC,IAAI,yBAErGL,EAAAC,EAAAC,cAAA,QAAMI,SAAUlC,KAAKe,aAAcgB,UAAU,cACzCH,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,YACXP,EAAAC,EAAAC,cAAA,MAAIM,GAAG,eAAP,oBAEJR,EAAAC,EAAAC,cAAA,SACIO,IAAK,SAACC,GAAYZ,EAAKa,UAAYD,GACnCE,KAAK,OACLJ,GAAG,WACHX,MAAOX,EACP2B,SAAUzC,KAAKkB,aACfwB,YAAa,6BAEjBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASpB,GAAgB,eA1DpCgC,6BCAXC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA9C,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,GAAA9C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8C,GAAAE,MAAA9C,KAAA+C,YAAA,OAAAjD,OAAAkD,EAAA,EAAAlD,CAAA8C,EAAAC,GAAA/C,OAAAmD,EAAA,EAAAnD,CAAA8C,EAAA,EAAAM,IAAA,SAAAzB,MAAA,WAYa,IAAA0B,EAC0CnD,KAAKJ,MAA5CwD,EADHD,EACGC,KAAMC,EADTF,EACSE,YAAaC,EADtBH,EACsBG,OAAQC,EAD9BJ,EAC8BI,QAEnC,OACI3B,EAAAC,EAAAC,cAAA,OACIC,UAAS,QAAAyB,OAAUF,EAAS,SAAW,IACvCC,QAASA,GAET3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcqB,EAAK,GAAGK,eACrC7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQqB,GACtBC,GAAezB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBsB,SAvBnET,EAAA,CAAmCD,aAAtBC,EAOFc,aAAe,CAClBL,YAAa,GACbC,QAAQ,EACRC,QAAS,4ECLXI,cAKF,SAAAA,EAAY/D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2D,IACf9D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6D,GAAAxD,KAAAH,KAAMJ,KAOVsB,aAAe,SAACC,GACZtB,EAAKe,SAAS,CAAEgD,OAAQzC,EAAMK,OAAOC,SATtB5B,EAYnBkB,aAAe,SAACI,GACZA,EAAMC,iBADgB,IAEdwC,EAAW/D,EAAKgB,MAAhB+C,OACAC,EAAyBhE,EAAKD,MAA9BiE,qBACRhE,EAAKe,SAAS,CAAEgD,OAAQ,KACxBC,EAAqBD,IAjBN/D,EAoBnBiE,eAAiB,SAACC,GACdlE,EAAKe,SAAS,CAAEoD,cAAeL,EAAQnB,KAAKyB,QAC5CpE,EAAKD,MAAMiE,qBAAqBE,IAtBjBlE,EAyBnBqE,iBAAmB,SAACF,GAChBnE,EAAKe,SAAS,CAAEoD,mBAxBhBnE,EAAKgB,MAAQ,CAETmD,cAAeL,EAAQnB,KAAKyB,OAJjBpE,wEA6BV,IAAA6B,EAAA1B,KAAAmD,EACsEnD,KAAKJ,MAAxEuE,EADHhB,EACGgB,MAAOC,EADVjB,EACUiB,WAAY9D,EADtB6C,EACsB7C,KAAM+D,EAD5BlB,EAC4BkB,cAAeC,EAD3CnB,EAC2CmB,OAAQC,EADnDpB,EACmDoB,MAAOC,EAD1DrB,EAC0DqB,QACvDR,EAAmBhE,KAAKa,MAAxBmD,cACR,OACIpC,EAAAC,EAAAC,cAAA,OAAKM,GAAG,WAAWqC,MAAmB,UAAZD,EAAsB,CAAEE,MAAO,MAAS,IAC9D9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,kBAAyCH,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,QAE7CD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,2BAAAyB,OAA6BQ,IAAkBL,EAAQnB,KAAKyB,MAAQ,SAAW,IACzFV,QAAS,WAAQ7B,EAAKwC,iBAAiBP,EAAQnB,KAAKyB,SAEpDrC,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,2BAAAyB,OAA6BQ,IAAkBL,EAAQnB,KAAKoC,MAAQ,SAAW,IACzFrB,QAAS,WAAQ7B,EAAKwC,iBAAiBP,EAAQnB,KAAKoC,SAGhDL,EAAMM,OAAS,EACXjD,EAAAC,EAAAC,cAACgD,EAAA,MAAD,CAAOC,KAAMC,OAAOT,EAAMM,OAAS,GAAII,cAAY,GAAnD,SAEArD,EAAAC,EAAAC,cAAA,uBAKhBF,EAAAC,EAAAC,cAAA,OACIC,UAAU,QACVM,IAAI,QACJkB,QAAS,SAACpC,GAAaA,EAAMK,SAAWE,EAAKwD,KAAK5E,MAAS+D,EAAc,QAErEL,IAAkBL,EAAQnB,KAAKyB,MAC3BE,EAAMgB,IAAI,SAACC,GACP,OAAIA,EAAKhC,KAEDxB,EAAAC,EAAAC,cAACuD,EAAD,CACInC,IAAKkC,EAAKhD,GACVgB,KAAMgC,EAAKE,UAAYF,EAAKhC,KAAOmC,kCAAwBH,EAAKb,MAAOjE,EAAK8C,MAC5EC,YAAamC,cAAIC,eAAKL,EAAKM,UAAW,UAAW,IACjDpC,OAAQc,EAAWhC,KAAOgD,EAAKhD,GAC/BmB,QAAS,WAAQ7B,EAAK9B,MAAMyE,cAAce,MAK/C,OAGXO,uBAAapB,EAAO,CAACjE,GAAO,QAAQ6E,IAAI,SAACS,GACrC,OACIhE,EAAAC,EAAAC,cAACuD,EAAD,CACInC,IAAK0C,EAAUxD,GACfgB,KAAMwC,EAAUxC,KAChBG,QAAS,WACL7B,EAAKoC,eAAe8B,EAAUxC,YAQ1DxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,YAAOxB,EAAK8C,MACZxB,EAAAC,EAAAC,cAAA,OAAKyB,QAAS,WAAQe,KAAYuB,MAAM,SAAS9D,UAAU,UACvDH,EAAAC,EAAAC,cAACgE,EAAAjE,EAAD,gBAnGFc,aAAhBgB,EACKnB,KAAO,CACVyB,MAAO,QACPW,MAAO,SAwGAjB,QC7DAoC,cAjDX,SAAAA,EAAYnG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IACflG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiG,GAAA5F,KAAAH,KAAMJ,KAMVoG,WAAa,WAEiB,SAA1BnG,EAAKgB,MAAMoF,WAAwBpG,EAAKe,SAAS,CAAEqF,WAAY,UAAapG,EAAKe,SAAS,CAAEqF,WAAY,SACxGpG,EAAKD,MAAM4E,QAAQ3E,EAAKgB,MAAMoF,YAC9BzF,QAAQC,IAAIZ,EAAKgB,MAAMoF,aATvBpG,EAAKgB,MAAQ,CACToF,WAAY,SAHDpG,wEAeV,IACGuD,EAASpD,KAAKJ,MAAdwD,KAEA6C,EAAejG,KAAKa,MAApBoF,WACR,OACIrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAe0C,MAAO,CAAEyB,OAAQ,WAC3C3C,QAASvD,KAAKgG,YAEK,SAAfC,EACIrE,EAAAC,EAAAC,cAACgD,EAAA,QAAD,CAASqB,MAAM,YAAYC,SAAS,SAChCxE,EAAAC,EAAAC,cAACgD,EAAA,KAAD,CAAM1B,KAAK,mBAGfxB,EAAAC,EAAAC,cAACgD,EAAA,QAAD,CAASqB,MAAM,aAAaC,SAAS,QACjCxE,EAAAC,EAAAC,cAACgD,EAAA,KAAD,CAAM1B,KAAK,iBAI3BxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaqB,GAC5BxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAGvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oFAAoFC,IAAI,iCA1C3FU,aC6DX0D,cA9DX,SAAAA,EAAYzG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqG,IACfxG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuG,GAAAlG,KAAAH,KAAMJ,KACD0G,WAAazG,EAAKyG,WAAWtF,KAAhBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAFHA,4EAKN,IACD0G,EAAcvG,KAAKkF,KAAnBqB,UACRA,EAAUC,UAAYD,EAAUE,yDAIhCzG,KAAKsG,0DAILtG,KAAKsG,8CAGA,IAAAnD,EACmCnD,KAAKJ,MAArC8F,EADHvC,EACGuC,SAAUpF,EADb6C,EACa7C,KAAMoG,EADnBvD,EACmBuD,YACxB,OACI9E,EAAAC,EAAAC,cAAA,OAAKO,IAAI,YACLN,UAAU,oBAEVH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEP2D,EAASP,IAAI,SAACwB,GACV,OACI/E,EAAAC,EAAAC,cAAA,OACIoB,IAAKyD,EAAQvE,GACbL,UAAS,qBAAAyB,OAAuBmD,EAAQC,SAAWtG,EAAK8C,MAAQ,UAEhExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQ4E,EAAQE,MAC/BjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW4E,EAAQA,SAClC/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQ4E,EAAQC,YAO/CF,EAAYvB,IAAI,SAAC/B,GACb,OACIxB,EAAAC,EAAAC,cAAA,OACIoB,IAAKE,EACLrB,UAAU,eAFd,GAAAyB,OAKWJ,EALX,gCA7CTT,aCgGRmE,cA/FX,SAAAA,EAAYlH,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8G,IACfjH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgH,GAAA3G,KAAAH,KAAMJ,KAcVmH,YAAc,SAAC5F,GACO,KAAlBA,EAAM6F,SAAkBnH,EAAKoH,cAhBdpH,EAmBnBoH,WAAa,WACTpH,EAAKqH,eAAiBC,KAAKC,MACtBvH,EAAKgB,MAAMwG,WACZxH,EAAKe,SAAS,CAAEyG,UAAU,IAC1BxH,EAAKD,MAAMqH,YAAW,GACtBpH,EAAKyH,wBAxBMzH,EA4BnByH,oBAAsB,WAClB9G,QAAQC,IAAI,UACZZ,EAAK0H,eAAiBC,YAAY,WACzBL,KAAKC,MAAQvH,EAAKqH,eAAkB,MACrCrH,EAAKe,SAAS,CAAEyG,UAAU,IAC1BxH,EAAK4H,uBAEV,MAnCY5H,EAsCnB4H,mBAAqB,WACjBjH,QAAQC,IAAI,cACRZ,EAAK0H,iBACLG,cAAc7H,EAAK0H,gBACnB1H,EAAKD,MAAMqH,YAAW,KA1CXpH,EA8CnBqB,aAAe,SAACC,GACZtB,EAAKe,SAAS,CACV+F,QAASxF,EAAMK,OAAOC,SAhDX5B,EAoDnBkB,aAAe,SAACI,GACZA,EAAMC,iBACNvB,EAAK8H,cACL9H,EAAKe,SAAS,CAAE+F,QAAS,MAvDV9G,EA0DnB8H,YAAc,WACV9H,EAAKD,MAAM+H,YAAY9H,EAAKgB,MAAM8F,UAzDlC9G,EAAKgB,MAAQ,CACT8F,QAAS,GACTU,UAAU,GAEdxH,EAAKkB,aAAelB,EAAKkB,aAAaC,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACpBA,EAAKqB,aAAerB,EAAKqB,aAAaF,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACpBA,EAAKkH,YAAclH,EAAKkH,YAAY/F,KAAjBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KARJA,sFAYfG,KAAKyH,sDAkDA,IACGd,EAAY3G,KAAKa,MAAjB8F,QACR,OACI/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,QACII,SAAUlC,KAAKe,aACfgB,UAAU,gBAEVH,EAAAC,EAAAC,cAAA,SACIM,GAAG,UACHC,IAAK,eACLG,KAAK,OACLT,UAAU,eACVN,MAAOkF,EACPiB,aAAc,MACdlF,YAAY,yBACZmF,QAAS7H,KAAK+G,YACdtE,SAAUzC,KAAKkB,eAGnBU,EAAAC,EAAAC,cAAA,UACIgG,SAAUnB,EAAQ9B,OAAS,EAC3BrC,KAAK,SACLT,UAAU,QAHd,iBAnFOY,aC6MZoF,cAtMX,SAAAA,EAAYnI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+H,IACflI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiI,GAAA5H,KAAAH,KAAMJ,KAsBVoI,WAAa,SAAC3G,GACVA,EAAOC,KAAK2G,iBAAgBpI,EAAKqI,WACjC7G,EAAO8G,GAAGC,kBAAiBvI,EAAKwI,SAChChH,EAAO8G,GAAG,UAAW,WACjB9G,EAAOC,KAAK2G,iBAAgBpI,EAAKqI,aAErC7G,EAAO8G,GAAGG,oBAAmB,SAAC/D,GAC1B,IAAMgE,EAAe5C,uBAAa9F,EAAKgB,MAAM0D,MAAOiE,iBAAOjE,GAAQ,MACnE1E,EAAK4I,mBAAmBF,GACxB1I,EAAKe,SAAS,CAAE2D,MAAOiE,iBAAOjE,OAElClD,EAAO8G,GAAGO,iBAAgB,SAACnE,GACvB1E,EAAKe,SAAS,CAAE2D,MAAOiE,iBAAOjE,OAElClD,EAAO8G,GAAGQ,gBAAe9I,EAAK+I,gBArCf/I,EAwCnBgJ,mBAAqB,SAACC,GAAa,IAAA3F,EACNtD,EAAKD,MAAtByB,EADuB8B,EACvB9B,OAAQf,EADe6C,EACf7C,KACR8D,EAAevE,EAAKgB,MAApBuD,WACR/C,EAAOC,KAAK8G,kBAAiB,CAAEU,WAAUlC,OAAQtG,EAAK8C,KAAMgB,gBA3C7CvE,EA8CnB+I,cAAgB,SAAAvI,GAAyB,IAAtB0I,EAAsB1I,EAAtB0I,OAAQC,EAAc3I,EAAd2I,QAEjBC,EADYpJ,EAAKgB,MAAfsD,MACegB,IAAI,SAAAC,GACvB,OAAIA,EAAKhD,KAAO2G,EACLjJ,OAAOoJ,OAAO,GAAI9D,EAAM,CAAE9E,KAAI,GAAAkD,OAAA1D,OAAAqJ,EAAA,EAAArJ,CAAMsF,EAAKb,OAAX,CAAkByE,MAEpD5D,IAEXvF,EAAKe,SAAS,CAAEuD,MAAO8E,KAtDRpJ,EAyDnB4I,mBAAqB,SAAAF,GAAgB,IAE3BU,EADYpJ,EAAKgB,MAAfsD,MACegB,IAAI,SAAAC,GACvB,IAAIgE,EAAWC,qBAAWjE,EAAKb,MAAOgE,EAAapD,IAAI,SAAAmE,GAAC,OAAIA,EAAElG,QAC9D,OAAOtD,OAAAyJ,EAAA,EAAAzJ,CAAA,GACAsF,EADP,CAEIb,MAAO6E,MAGfvJ,EAAKe,SAAS,CAAEuD,MAAO8E,KAlERpJ,EAsEnBqI,UAAY,SAAC9C,GACT,OAAOvF,EAAKwI,QAAQjD,GAAM,IAvEXvF,EA2EnBwI,QAAU,SAACjD,GAAwB,IAAlBoE,EAAkBzG,UAAA8B,OAAA,QAAA4E,IAAA1G,UAAA,IAAAA,UAAA,GAEvB1B,EAAWxB,EAAKD,MAAhByB,OACA8C,EAAUtE,EAAKgB,MAAfsD,MAEF8E,EAAWO,EAAQ,CAACpE,GAAJ,GAAA5B,OAAA1D,OAAAqJ,EAAA,EAAArJ,CAAgBqE,GAAhB,CAAuBiB,IAC7CvF,EAAKe,SAAS,CAAEuD,MAAO8E,EAAU7E,WAAYoF,EAAQpE,EAAOvF,EAAKgB,MAAMuD,aAEvE,IAAMsF,EAAY,GAAAlG,OAAMmG,mBAAN,KAAAnG,OAA0B4B,EAAKhD,IAC3CwH,EAAW,GAAApG,OAAMqG,SAAN,KAAArG,OAAgB4B,EAAKhD,IAEtCf,EAAO8G,GAAGyB,EAAa/J,EAAKiK,mBAAmB1E,EAAKhD,KACpDf,EAAO8G,GAAGuB,EAAc7J,EAAKkK,iBAAiB3E,EAAKhD,MAvFpCvC,EA4FnBkK,iBAAmB,SAAChB,GAChB,OAAO,SAAApC,GAAW,IAEVsC,EADcpJ,EAAKgB,MAAfsD,MACagB,IAAI,SAACC,GAGtB,OAFIA,EAAKhD,KAAO2G,GACZ3D,EAAKM,SAASsE,KAAKrD,GAChBvB,IAGXvF,EAAKe,SAAS,CAAEuD,MAAO8E,MArGZpJ,EAyGnBiK,mBAAqB,SAACf,GAClB,OAAO,SAAAkB,GAAwB,IAArB5C,EAAqB4C,EAArB5C,SAAU/G,EAAW2J,EAAX3J,KAChB,GAAIA,IAAST,EAAKD,MAAMU,KAAK8C,KAAM,KAE3B6F,EADcpJ,EAAKgB,MAAfsD,MACagB,IAAI,SAACC,GAQtB,OAPIA,EAAKhD,KAAO2G,IACR1B,IAAajC,EAAKsB,YAAYwD,SAAS5J,GACvC8E,EAAKsB,YAAYsD,KAAK1J,IACd+G,GAAYjC,EAAKsB,YAAYwD,SAAS5J,KAC9C8E,EAAKsB,YAActB,EAAKsB,YAAYyD,OAAO,SAAAb,GAAC,OAAIA,IAAMhJ,MAGvD8E,IAEXvF,EAAKe,SAAS,CAAEuD,MAAO8E,OAvHhBpJ,EA6HnB8H,YAAc,SAACoB,EAAQpC,GACA9G,EAAKD,MAAhByB,OACDC,KAAK8I,eAAc,CAAErB,SAAQpC,aA/HrB9G,EAkInBoH,WAAa,SAAC8B,EAAQ1B,GACCxH,EAAKD,MAAhByB,OACDC,KAAKuI,SAAQ,CAAEd,SAAQ1B,cApIfxH,EAsInBwE,cAAgB,SAACD,GACbvE,EAAKe,SAAS,CAAEwD,gBArIhBvE,EAAKgB,MAAQ,CACTsD,MAAO,GACPC,WAAY,KACZG,MAAO,GACP0B,WAAY,IANDpG,mFAUC,IACRwB,EAAWrB,KAAKJ,MAAhByB,OACRrB,KAAKgI,WAAW3G,kDAGG,IACXA,EAAWrB,KAAKJ,MAAhByB,OACRA,EAAOgJ,IAAIjC,mBACX/G,EAAOgJ,IAAI3B,kBACXrH,EAAOgJ,IAAI/B,qBACXjH,EAAOgJ,IAAI1B,kDAwHN,IAAAjH,EAAA1B,KAAAsK,EACoBtK,KAAKJ,MAAtBU,EADHgK,EACGhK,KAAMgE,EADTgG,EACShG,OADT3C,EAE4C3B,KAAKa,MAA9CsD,EAFHxC,EAEGwC,MAAOC,EAFVzC,EAEUyC,WAAYG,EAFtB5C,EAEsB4C,MAAO0B,EAF7BtE,EAE6BsE,WAClC,OACIrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACyI,EAAD,CACIhG,MAAOA,EACPD,OAAQA,EACRH,MAAOA,EACP7D,KAAMA,EACN8D,WAAYA,EACZC,cAAerE,KAAKqE,cACpBR,qBAAsB7D,KAAK6I,mBAC3BrE,QAASyB,IAEbrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAEQ,OAAfqC,EACIxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAC0I,EAAD,CACIpH,KAAMgB,EAAWhB,KACjBoB,QAAS,SAACyB,GACNvE,EAAKd,SAAS,CAAEqF,kBAGxBrE,EAAAC,EAAAC,cAAC2I,EAAD,CACI/E,SAAUtB,EAAWsB,SACrBpF,KAAMA,EACNoG,YAAatC,EAAWsC,cAE5B9E,EAAAC,EAAAC,cAAC4I,EAAD,CACI/C,YACI,SAAChB,GACGjF,EAAKiG,YAAYvD,EAAWhC,GAAIuE,IAGxCM,WACI,SAACI,GACG7G,QAAQC,IAAI2D,EAAWhC,IACvBV,EAAKuF,WAAW7C,EAAWhC,GAAIiF,OAO3CzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,qCA5LRa,aCEtBgI,EAAY,2BAkEHC,cA/DX,SAAAA,EAAYhL,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4K,IACf/K,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8K,GAAAzK,KAAAH,KAAMJ,KAYVoI,WAAa,WACT,IAAM3G,EAASwJ,IAAGF,GAClBtJ,EAAO8G,GAAG,UAAW,WACbtI,EAAKgB,MAAMP,KACXT,EAAKiL,UAAUzJ,GAEfb,QAAQC,IAAI,eAGpBZ,EAAKe,SAAS,CAAES,YAtBDxB,EAyBnBiL,UAAY,SAACzJ,GACTA,EAAOC,KAAKC,cAAa1B,EAAKgB,MAAMP,KAAK8C,KAAM,SAAA/C,GAAsB,IAAnBE,EAAmBF,EAAnBE,OAAQD,EAAWD,EAAXC,KAClDC,EACAV,EAAKgB,MAAM,CAAEP,KAAM,OAEnBT,EAAKO,QAAQE,MA9BNT,EAoCnBO,QAAU,SAACE,GACYT,EAAKgB,MAAhBQ,OACDC,KAAKoH,iBAAgBpI,GAC5BT,EAAKe,SAAS,CAAEN,UAvCDT,EA0CnByE,OAAS,WACczE,EAAKgB,MAAhBQ,OACDC,KAAKyJ,UACZlL,EAAKe,SAAS,CAAEN,KAAM,QA3CtBT,EAAKgB,MAAQ,CACTQ,OAAQ,KACRf,KAAM,MAJKT,oFAUfG,KAAKgI,8CAsCA,IAAArG,EACoB3B,KAAKa,MAAtBQ,EADHM,EACGN,OAAQf,EADXqB,EACWrB,KAChB,OACIsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAENzB,EAGGsB,EAAAC,EAAAC,cAACkJ,EAAD,CAAe3J,OAAQA,EAAQf,KAAMA,EAAMgE,OAAQtE,KAAKsE,SAFxD1C,EAAAC,EAAAC,cAACmJ,EAAD,CAAW5J,OAAQA,EAAQjB,QAASJ,KAAKI,kBAvD5CuC,aCQNuI,sBAfb,SAAAA,EAAYtL,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkL,IACjBrL,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoL,GAAA/K,KAAAH,KAAMJ,KACDiB,MAAQ,CACXgF,MAAO,cAHQhG,wEAOjB,OACE+B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqJ,EAAD,CAAQtF,MAAO7F,KAAKa,MAAMgF,gBAVhBlD,cCQEyI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECVNC,IAASC,OAAQ9J,EAAAC,EAAAC,cAAE6J,EAAF,MAAYC,SAASC,eAAe,SDyH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gCEnInBC,EAAOC,QAAU,CACbpE,eAAgB,iBAChBS,eAAgB,iBAChBiB,iBAAkB,mBAClBS,aAAc,eACd9B,kBAAmB,oBACnBuB,OAAQ,SACRtI,YAAa,cACbwJ,OAAQ,SACR3C,gBAAiB,kBACjBO,cAAe,qCCVnB,IAAM2D,EAASC,EAAQ,IAuCjBhH,EAA0B,SAAChB,GAA6B,IAAtBiI,EAAsBzJ,UAAA8B,OAAA,QAAA4E,IAAA1G,UAAA,GAAAA,UAAA,GAAP,GACnD,OAAOwB,EAAM4F,OAAO,SAAAb,GAAC,OAAIA,IAAMkD,IAAcC,KAAK,QAAU,eAK1DC,EAAU,SAACC,GACb,SAAAnJ,OAAUmJ,EAAKC,WAAf,KAAApJ,QAA8B,IAAImJ,EAAKE,cAAcC,OAAO,KAGhEV,EAAOC,QAAU,CACbU,WA/Ce,eAAA1M,EAAA0C,UAAA8B,OAAA,QAAA4E,IAAA1G,UAAA,GAAAA,UAAA,GAGf,GAHeiK,EAAA3M,EACf+C,YADe,IAAA4J,EACR,GADQA,EAAAC,EAAA5M,EAEf6M,gBAFe,IAAAD,EAEJ,KAFIA,EAAA,MAGP,CACR7K,GAAIkK,IACJlJ,OACA8J,aA0CAC,cArCkB,eAAAlD,EAAAlH,UAAA8B,OAAA,QAAA4E,IAAA1G,UAAA,GAAAA,UAAA,GAGlB,GAHkBqK,EAAAnD,EAClBtD,eADkB,IAAAyG,EACR,GADQA,EAAAC,EAAApD,EAElBrD,cAFkB,IAAAyG,EAET,GAFSA,EAAA,MAGV,CACRjL,GAAIkK,IACJzF,KAAM6F,EAAQ,IAAIvF,KAAKA,KAAKC,QAC5BT,UACAC,WA+BA0G,WA3Be,eAAAC,EAAAxK,UAAA8B,OAAA,QAAA4E,IAAA1G,UAAA,GAAAA,UAAA,GAKf,GALeyK,EAAAD,EACf7H,gBADe,IAAA8H,EACJ,GADIA,EAAAC,GAAAF,EAEfnK,KAFemK,EAGfhJ,cAHe,IAAAkJ,EAGP,GAHOA,EAAAC,EAAAH,EAIfjI,iBAJe,IAAAoI,KAAA,MAKP,CACRtL,GAAIkK,IACJlJ,KAAMkC,EAAY,UAAYC,EAAwBhB,GACtDmB,WACAnB,QACAmC,YAAa,GACbpB,cAiBAC","file":"static/js/main.f138b8cb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { VERIFY_USER } from '../Events';\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nickname: '',\n            error: ''\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    setUser = ({ user, isUser }) => {\n        console.log(user, isUser)\n        if (isUser) {\n            this.setError('User name taken')\n        } else {\n            this.setError('')\n            this.props.setUser(user)\n\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(this.state.nickname);\n        const { socket } = this.props\n        const { nickname } = this.state\n        socket.emit(VERIFY_USER, nickname, this.setUser)\n        this.setState({ nickname: '' })\n    }\n\n    handleChange(event) {\n        this.setState({ nickname: event.target.value })\n    }\n\n    setError = (error) => {\n        this.setState({ error })\n    }\n\n    render() {\n        const { nickname, error } = this.state;\n        return (\n            <div className=\"login\">\n                <div className=\"login-form-logo\">\n                    <img src=\"https://vectr.com/jaybur/efqGEpvOy.png?width=640&height=640&select=efqGEpvOypage0\" alt=\"MuffinTalk-cat-logo\" />\n                </div>\n                <form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <label htmlFor=\"nickname\">\n                        <h2 id=\"login-label\">Got a nickname?</h2>\n                    </label>\n                    <input\n                        ref={(input) => { this.textInput = input }}\n                        type=\"text\"\n                        id=\"nickname\"\n                        value={nickname}\n                        onChange={this.handleChange}\n                        placeholder={'Type your cool name here'}\n                    />\n                    <div className=\"error\">{error ? error : null}</div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default LoginForm;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nexport class SideBarOption extends Component {\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        lastMessage: PropTypes.string,\n        active: PropTypes.bool,\n        onClick: PropTypes.func\n    }\n    static defaultProps = {\n        lastMessage: '',\n        active: false,\n        onClick: () => { }\n    }\n    render() {\n        const { name, lastMessage, active, onClick } = this.props\n\n        return (\n            <div\n                className={`user ${active ? 'active' : ''}`}\n                onClick={onClick}\n            >\n                <div className=\"user-photo\">{name[0].toUpperCase()}</div>\n                <div className=\"user-info\">\n                    <div className=\"name\">{name}</div>\n                    {lastMessage && <div className=\"last-message\">{lastMessage}</div>}\n                </div>\n\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { SideBarOption } from './SideBarOption'\nimport { get, last, differenceBy } from 'lodash'\nimport { createChatNameFromUsers } from '../../Factories'\nimport FAChevronDown from 'react-icons/lib/md/keyboard-arrow-down'\nimport MdPowerSettingsNew from 'react-icons/lib/md/power-settings-new'\nimport { Badge } from 'react-mdl'\n\nclass SideBar extends Component {\n    static type = {\n        CHATS: \"chats\",\n        USERS: \"users\"\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            activeSideBar: SideBar.type.CHATS,\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ search: event.target.value })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const { search } = this.state\n        const { onSendPrivateMessage } = this.props\n        this.setState({ search: '' })\n        onSendPrivateMessage(search)\n    }\n\n    addChatForUser = (username) => {\n        this.setState({ activeSideBar: SideBar.type.CHATS })\n        this.props.onSendPrivateMessage(username)\n    }\n\n    setActiveSideBar = (activeSideBar) => {\n        this.setState({ activeSideBar })\n    }\n\n    render() {\n        const { chats, activeChat, user, setActiveChat, logout, users, setMenu } = this.props\n        const { activeSideBar, } = this.state\n        return (\n            <div id=\"side-bar\" style={setMenu === 'close' ? { width: '0%' } : {}}>\n                <div className=\"heading\">\n                    <div className=\"app-name\">MaffinTalk Chat<FAChevronDown /></div>\n                </div>\n                <div className=\"side-bar-select\">\n                    <div className={`side-bar-select__option ${activeSideBar === SideBar.type.CHATS ? 'active' : ''}`}\n                        onClick={() => { this.setActiveSideBar(SideBar.type.CHATS) }}\n                    >\n                        <span>Chats</span>\n                    </div>\n                    <div className={`side-bar-select__option ${activeSideBar === SideBar.type.USERS ? 'active' : ''}`}\n                        onClick={() => { this.setActiveSideBar(SideBar.type.USERS) }}\n                    >\n                        {\n                            users.length > 1 ?\n                                <Badge text={String(users.length - 1)} noBackground>Users</Badge>\n                                :\n                                <span>Users</span>\n                        }\n\n                    </div>\n                </div>\n                <div\n                    className=\"users\"\n                    ref='users'\n                    onClick={(event) => { (event.target === this.refs.user) && setActiveChat(null) }}>\n                    {\n                        activeSideBar === SideBar.type.CHATS ?\n                            chats.map((chat) => {\n                                if (chat.name) {\n                                    return (\n                                        <SideBarOption\n                                            key={chat.id}\n                                            name={chat.isGeneral ? chat.name : createChatNameFromUsers(chat.users, user.name)}\n                                            lastMessage={get(last(chat.messages), 'message', '')}\n                                            active={activeChat.id === chat.id}\n                                            onClick={() => { this.props.setActiveChat(chat) }}\n                                        />\n                                    )\n                                }\n\n                                return null\n                            })\n                            :\n                            differenceBy(users, [user], 'name').map((otherUser) => {\n                                return (\n                                    <SideBarOption\n                                        key={otherUser.id}\n                                        name={otherUser.name}\n                                        onClick={() => {\n                                            this.addChatForUser(otherUser.name)\n                                        }}\n                                    />\n                                )\n                            })\n                    }\n\n                </div>\n                <div className=\"current-user\">\n                    <span>{user.name}</span>\n                    <div onClick={() => { logout() }} title=\"Logout\" className=\"logout\">\n                        <MdPowerSettingsNew />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SideBar;\n\n","import React, { Component } from 'react';\nimport { Tooltip, Icon } from 'react-mdl'\n\n\nclass ChatHeading extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            menuStatus: 'close'\n        }\n    }\n\n    handleMenu = () => {\n\n        this.state.menuStatus === 'open' ? this.setState({ menuStatus: 'close' }) : this.setState({ menuStatus: 'open' })\n        this.props.setMenu(this.state.menuStatus)\n        console.log(this.state.menuStatus)\n\n    }\n\n    render() {\n        const { name } = this.props\n\n        const { menuStatus } = this.state\n        return (\n            <div className=\"chat-header\">\n                <div className=\"menu-control\" style={{ cursor: 'pointer' }}\n                    onClick={this.handleMenu}\n                >{\n                        menuStatus === 'open' ?\n                            <Tooltip label=\"Open Menu\" position=\"right\">\n                                <Icon name=\"arrow_forward\" />\n                            </Tooltip>\n                            :\n                            <Tooltip label=\"Close Menu\" position=\"left\">\n                                <Icon name=\"arrow_back\" />\n                            </Tooltip>\n                    }\n                </div>\n                <div className=\"user-info\">\n                    <div className=\"user-name\">{name}</div>\n                    <div className=\"status\">\n                        <div className=\"indicator\"></div>\n                    </div>\n                </div>\n                <div className=\"options\">\n                    <img src=\"https://vectr.com/jaybur/efqGEpvOy.png?width=640&height=640&select=efqGEpvOypage0\" alt=\"MuffinTalk-cat-logo\" />\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default ChatHeading;","import React, { Component } from 'react';\n\nclass Messages extends Component {\n    constructor(props) {\n        super(props);\n        this.scrollDown = this.scrollDown.bind(this)\n    }\n\n    scrollDown() {\n        const { container } = this.refs\n        container.scrollTop = container.scrollHeight\n    }\n\n    componentDidMount() {\n        this.scrollDown()\n    }\n\n    componentDidUpdate() {\n        this.scrollDown()\n    }\n\n    render() {\n        const { messages, user, typingUsers } = this.props\n        return (\n            <div ref='container'\n                className=\"thread-container\"\n            >\n                <div className=\"thread\">\n                    {\n                        messages.map((message) => {\n                            return (\n                                <div\n                                    key={message.id}\n                                    className={`message-container ${message.sender === user.name && 'right'}`}\n                                >\n                                    <div className=\"time\">{message.time}</div>\n                                    <div className=\"data\">\n                                        <div className=\"message\">{message.message}</div>\n                                        <div className=\"name\">{message.sender}</div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                    {\n                        typingUsers.map((name) => {\n                            return (\n                                <div\n                                    key={name}\n                                    className=\"typing-user\"\n                                >\n                                    {\n                                        `${name} is typing . . .`\n                                    }\n                                </div>\n                            )\n                        })\n                    }\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Messages;","import React, { Component } from 'react';\n\nclass MessageInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            isTyping: false\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n    }\n\n    componentWillUnmount() {\n        this.stopCheckingTyping()\n    }\n\n    handleKeyUp = (event) => {\n        event.keyCode !== 13 && this.sendTyping()\n    }\n\n    sendTyping = () => {\n        this.lastUpdateTime = Date.now()\n        if (!this.state.isTyping) {\n            this.setState({ isTyping: true })\n            this.props.sendTyping(true)\n            this.startCheckingTyping()\n        }\n    }\n\n    startCheckingTyping = () => {\n        console.log('Typing')\n        this.typingInterval = setInterval(() => {\n            if ((Date.now() - this.lastUpdateTime) > 300) {\n                this.setState({ isTyping: false })\n                this.stopCheckingTyping()\n            }\n        }, 300)\n    }\n\n    stopCheckingTyping = () => {\n        console.log('not typing')\n        if (this.typingInterval) {\n            clearInterval(this.typingInterval)\n            this.props.sendTyping(false)\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            message: event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        this.sendMessage()\n        this.setState({ message: '' })\n    }\n\n    sendMessage = () => {\n        this.props.sendMessage(this.state.message)\n    }\n\n    render() {\n        const { message } = this.state\n        return (\n            <div className=\"message-input\">\n                <form\n                    onSubmit={this.handleSubmit}\n                    className=\"message-form\"\n                >\n                    <input\n                        id=\"message\"\n                        ref={\"messageinput\"}\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={message}\n                        autoComplete={'off'}\n                        placeholder=\"type your message here\"\n                        onKeyUp={this.handleKeyUp}\n                        onChange={this.handleChange}\n\n                    />\n                    <button\n                        disabled={message.length < 1}\n                        type=\"submit\"\n                        className=\"send\"\n                    >\n                        Send\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default MessageInput;","import React, { Component } from 'react';\nimport SideBar from '../sideBar/SideBar';\nimport { COMMUNITY_CHAT, MESSAGE_RECIEVED, TYPING, MESSAGE_SENT, PRIVATE_MESSAGE, USER_CONNECTED, USER_DISCONNECTED, NEW_CHAT_USER } from '../../Events'\nimport ChatHeading from './ChatHeading'\nimport Messages from '../Message/Messages'\nimport MessageInput from '../Message/MessageInput'\nimport { values, difference, differenceBy } from 'lodash'\n\nclass ChatContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chats: [],\n            activeChat: null,\n            users: [],\n            menuStatus: ''\n        }\n    }\n\n    componentDidMount() {\n        const { socket } = this.props\n        this.initSocket(socket)\n    }\n\n    componentWillUnmount() {\n        const { socket } = this.props\n        socket.off(PRIVATE_MESSAGE)\n        socket.off(USER_CONNECTED)\n        socket.off(USER_DISCONNECTED)\n        socket.off(NEW_CHAT_USER)\n    }\n\n    initSocket = (socket) => {\n        socket.emit(COMMUNITY_CHAT, this.resetChat)\n        socket.on(PRIVATE_MESSAGE, this.addChat)\n        socket.on('connect', () => {\n            socket.emit(COMMUNITY_CHAT, this.resetChat)\n        })\n        socket.on(USER_DISCONNECTED, (users) => {\n            const removedUsers = differenceBy(this.state.users, values(users), 'id')\n            this.removeUserFromChat(removedUsers)\n            this.setState({ users: values(users) })\n        })\n        socket.on(USER_CONNECTED, (users) => {\n            this.setState({ users: values(users) })\n        })\n        socket.on(NEW_CHAT_USER, this.addUserToChat)\n    }\n\n    sendPrivateMessage = (reciever) => {\n        const { socket, user } = this.props\n        const { activeChat } = this.state\n        socket.emit(PRIVATE_MESSAGE, { reciever, sender: user.name, activeChat })\n    }\n\n    addUserToChat = ({ chatId, newUser }) => {\n        const { chats } = this.state\n        const newChats = chats.map(chat => {\n            if (chat.id === chatId) {\n                return Object.assign({}, chat, { user: [...chat.users, newUser] })\n            }\n            return chat\n        })\n        this.setState({ chats: newChats })\n    }\n\n    removeUserFromChat = removedUsers => {\n        const { chats } = this.state\n        const newChats = chats.map(chat => {\n            let newUsers = difference(chat.users, removedUsers.map(u => u.name))\n            return {\n                ...chat,\n                users: newUsers\n            }\n        })\n        this.setState({ chats: newChats })\n    }\n\n    //Reset the chat back to only the chat passed in\n    resetChat = (chat) => {\n        return this.addChat(chat, true)\n    }\n    //Adds a new chat to the chat container, if reset is true ,than it removes\n    //all chats and sets the chat to be the main chat .\n    addChat = (chat, reset = false) => {\n\n        const { socket } = this.props\n        const { chats } = this.state\n\n        const newChats = reset ? [chat] : [...chats, chat]\n        this.setState({ chats: newChats, activeChat: reset ? chat : this.state.activeChat })\n\n        const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`\n        const typingEvent = `${TYPING}-${chat.id}`\n\n        socket.on(typingEvent, this.updateTypingInChat(chat.id))\n        socket.on(messageEvent, this.addMessageToChat(chat.id))\n    }\n\n    //returns a function that will add message to chat with\n    //the chatId passed in\n    addMessageToChat = (chatId) => {\n        return message => {\n            const { chats } = this.state\n            let newChats = chats.map((chat) => {\n                if (chat.id === chatId)\n                    chat.messages.push(message)\n                return chat\n\n            })\n            this.setState({ chats: newChats })\n        }\n    }\n    //updates the typing of chat with id passed in \n    updateTypingInChat = (chatId) => {\n        return ({ isTyping, user }) => {\n            if (user !== this.props.user.name) {\n                const { chats } = this.state\n                let newChats = chats.map((chat) => {\n                    if (chat.id === chatId) {\n                        if (isTyping && !chat.typingUsers.includes(user)) {\n                            chat.typingUsers.push(user)\n                        } else if (!isTyping && chat.typingUsers.includes(user)) {\n                            chat.typingUsers = chat.typingUsers.filter(u => u !== user)\n                        }\n                    }\n                    return chat\n                })\n                this.setState({ chats: newChats })\n            }\n        }\n    }\n\n    //Adds a message to the specified chat\n    sendMessage = (chatId, message) => {\n        const { socket } = this.props\n        socket.emit(MESSAGE_SENT, { chatId, message })\n    }\n    //Sends typing status to the server\n    sendTyping = (chatId, isTyping) => {\n        const { socket } = this.props\n        socket.emit(TYPING, { chatId, isTyping })\n    }\n    setActiveChat = (activeChat) => {\n        this.setState({ activeChat })\n    }\n\n\n\n    render() {\n        const { user, logout } = this.props\n        const { chats, activeChat, users, menuStatus } = this.state\n        return (\n            <div className=\"container\">\n                <SideBar\n                    users={users}\n                    logout={logout}\n                    chats={chats}\n                    user={user}\n                    activeChat={activeChat}\n                    setActiveChat={this.setActiveChat}\n                    onSendPrivateMessage={this.sendPrivateMessage}\n                    setMenu={menuStatus}\n                />\n                <div className=\"chat-room-container\">\n                    {\n                        activeChat !== null ? (\n                            <div className=\"chat-room\">\n                                <ChatHeading\n                                    name={activeChat.name}\n                                    setMenu={(menuStatus) => {\n                                        this.setState({ menuStatus })\n                                    }}\n                                />\n                                <Messages\n                                    messages={activeChat.messages}\n                                    user={user}\n                                    typingUsers={activeChat.typingUsers}\n                                />\n                                <MessageInput\n                                    sendMessage={\n                                        (message) => {\n                                            this.sendMessage(activeChat.id, message)\n                                        }\n                                    }\n                                    sendTyping={\n                                        (isTyping) => {\n                                            console.log(activeChat.id)\n                                            this.sendTyping(activeChat.id, isTyping)\n                                        }\n                                    }\n                                />\n                            </div>\n                        ) :\n                            (\n                                <div className=\"chat-room choose\">\n                                    <h3>Choose a Chat</h3>\n                                </div>\n                            )\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default ChatContainer;","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport LoginForm from './LoginForm';\nimport ChatContainer from './chat/ChatContainer'\n\nimport { USER_CONNECTED, LOGOUT, VERIFY_USER } from '../Events';\n//for production\n//const socketURL = \"/\"\n\n//for local\nconst socketURL = \"http://192.168.1.5:3231/\"\n\nclass Layout extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            socket: null,\n            user: null,\n\n        }\n    }\n\n    componentWillMount() {\n        this.initSocket()\n    }\n    //Connect to & initialize the socket\n    initSocket = () => {\n        const socket = io(socketURL)\n        socket.on('connect', () => {\n            if (this.state.user) {\n                this.reconnect(socket)\n            } else {\n                console.log('Connected');\n            }\n        })\n        this.setState({ socket })\n    }\n\n    reconnect = (socket) => {\n        socket.emit(VERIFY_USER, this.state.user.name, ({ isUser, user }) => {\n            if (isUser) {\n                this.state({ user: null })\n            } else {\n                this.setUser(user)\n            }\n        })\n    }\n\n    //Sets the user porperty in the state.\n    setUser = (user) => {\n        const { socket } = this.state\n        socket.emit(USER_CONNECTED, user);\n        this.setState({ user })\n    }\n    //Sets the user property in the state back to null.\n    logout = () => {\n        const { socket } = this.state\n        socket.emit(LOGOUT);\n        this.setState({ user: null })\n    }\n\n    render() {\n        const { socket, user } = this.state;\n        return (\n            <div className=\"container\">\n                {\n                    !user ?\n                        <LoginForm socket={socket} setUser={this.setUser} />\n                        :\n                        <ChatContainer socket={socket} user={user} logout={this.logout} />\n                }\n            </div>\n        );\n    }\n}\n\nexport default Layout;","import React, { Component } from 'react';\nimport Layout from './components/Layout';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: 'MuffinTalk'\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Layout title={this.state.title} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();","module.exports = {\n    COMMUNITY_CHAT: \"COMMUNITY_CHAT\",\n    USER_CONNECTED: \"USER_CONNECTED\",\n    MESSAGE_RECIEVED: \"MESSAGE_RECIEVED\",\n    MESSAGE_SENT: \"MESSAGE_SENT\",\n    USER_DISCONNECTED: \"USER_DISCONNECTED\",\n    TYPING: \"TYPING\",\n    VERIFY_USER: \"VERIFY_USER\",\n    LOGOUT: \"LOGOUT\",\n    PRIVATE_MESSAGE: \"PRIVATE_MESSAGE\",\n    NEW_CHAT_USER: \"NEW_CHAT_USER\"\n}","const uuidv4 = require('uuid/v4')\n\n//create a new user\nconst createUser = ({\n    name = '',\n    socketId = null\n} = {}) => ({\n    id: uuidv4(),\n    name,\n    socketId\n})\n\n//create a message \n\nconst createMessage = ({\n    message = '',\n    sender = ''\n} = {}) => ({\n    id: uuidv4(),\n    time: getTime(new Date(Date.now())),\n    message,\n    sender\n})\n\n//create a chat \nconst createChat = ({\n    messages = [],\n    name = \"General\",\n    users = [],\n    isGeneral = false\n} = {}) => ({\n    id: uuidv4(),\n    name: isGeneral ? \"General\" : createChatNameFromUsers(users),\n    messages,\n    users,\n    typingUsers: [],\n    isGeneral\n})\n\nconst createChatNameFromUsers = (users, excludedUser = \"\") => {\n    return users.filter(u => u !== excludedUser).join(' & ') || \"Empty Users\"\n}\n\n\n\nconst getTime = (date) => {\n    return `${date.getHours()}:${(\"0\"+date.getMinutes()).slice(-2)}`\n}\n\nmodule.exports = {\n    createUser,\n    createMessage,\n    createChat,\n    createChatNameFromUsers\n}"],"sourceRoot":""}